# Hash 1
# 수많은 마라톤 선수들이 마라톤에 참여하였습니다. 단 한 명의 선수를 제외하고는 모든 선수가 마라톤을 완주하였습니다.

# 마라톤에 참여한 선수들의 이름이 담긴 배열 participant와 완주한 선수들의 이름이 담긴 배열 completion이 주어질 때, 완주하지 못한 선수의 이름을 return 하도록 solution 함수를 작성해주세요.

# 제한사항
# 마라톤 경기에 참여한 선수의 수는 1명 이상 100,000명 이하입니다.
# completion의 길이는 participant의 길이보다 1 작습니다.
# 참가자의 이름은 1개 이상 20개 이하의 알파벳 소문자로 이루어져 있습니다.
# 참가자 중에는 동명이인이 있을 수 있습니다.

# 입출력 예시
# participant	completion	return
# ["leo", "kiki", "eden"]	["eden", "kiki"]	"leo"
# ["marina", "josipa", "nikola", "vinko", "filipa"]	["josipa", "filipa", "marina", "nikola"]	"vinko"
# ["mislav", "stanko", "mislav", "ana"]	["stanko", "ana", "mislav"]	"mislav"

def solution(participant, completion):
    participant.sort() # sort() = 리스트 정렬
    completion.sort()
    
    for a, b in zip(participant, completion): # zip(a, b) = a와 b를 순서대로 비교해줌 
        if a != b :
            return a
        
    return participant[-1]
# 마지막에 남는 return 값은 retire자들이기 때문에 위의 예시에선 항상 한명만 완주하지 못했기에 participant의 마지막 원소만을 반환하면 된다.
# 고로 -1로 마지막 원소만 반환한다.

# Hash 2
# 당신은 폰켓몬을 잡기 위한 오랜 여행 끝에, 홍 박사님의 연구실에 도착했습니다. 홍 박사님은 당신에게 자신의 연구실에 있는 총 N 마리의 폰켓몬 중에서 N/2마리를 가져가도 좋다고 했습니다.
# 홍 박사님 연구실의 폰켓몬은 종류에 따라 번호를 붙여 구분합니다. 따라서 같은 종류의 폰켓몬은 같은 번호를 가지고 있습니다. 예를 들어 연구실에 총 4마리의 폰켓몬이 있고, 각 폰켓몬의 종류 번호가 [3번, 1번, 2번, 3번]이라면 이는 3번 폰켓몬 두 마리, 1번 폰켓몬 한 마리, 2번 폰켓몬 한 마리가 있음을 나타냅니다. 이때, 4마리의 폰켓몬 중 2마리를 고르는 방법은 다음과 같이 6가지가 있습니다.

# 첫 번째(3번), 두 번째(1번) 폰켓몬을 선택
# 첫 번째(3번), 세 번째(2번) 폰켓몬을 선택
# 첫 번째(3번), 네 번째(3번) 폰켓몬을 선택
# 두 번째(1번), 세 번째(2번) 폰켓몬을 선택
# 두 번째(1번), 네 번째(3번) 폰켓몬을 선택
# 세 번째(2번), 네 번째(3번) 폰켓몬을 선택

# 이때, 첫 번째(3번) 폰켓몬과 네 번째(3번) 폰켓몬을 선택하는 방법은 한 종류(3번 폰켓몬 두 마리)의 폰켓몬만 가질 수 있지만, 다른 방법들은 모두 두 종류의 폰켓몬을 가질 수 있습니다. 따라서 위 예시에서 가질 수 있는 폰켓몬 종류 수의 최댓값은 2가 됩니다.
# 당신은 최대한 다양한 종류의 폰켓몬을 가지길 원하기 때문에, 최대한 많은 종류의 폰켓몬을 포함해서 N/2마리를 선택하려 합니다. N마리 폰켓몬의 종류 번호가 담긴 배열 nums가 매개변수로 주어질 때, N/2마리의 폰켓몬을 선택하는 방법 중, 가장 많은 종류의 폰켓몬을 선택하는 방법을 찾아, 그때의 폰켓몬 종류 번호의 개수를 return 하도록 solution 함수를 완성해주세요.

# 제한사항
# nums는 폰켓몬의 종류 번호가 담긴 1차원 배열입니다.
# nums의 길이(N)는 1 이상 10,000 이하의 자연수이며, 항상 짝수로 주어집니다.
# 폰켓몬의 종류 번호는 1 이상 200,000 이하의 자연수로 나타냅니다.
# 가장 많은 종류의 폰켓몬을 선택하는 방법이 여러 가지인 경우에도, 선택할 수 있는 폰켓몬 종류 개수의 최댓값 하나만 return 하면 됩니다.

# 입출력 예
# nums	result
# [3,1,2,3]	2
# [3,3,3,2,2,4]	3
# [3,3,3,2,2,2]	2

def solution(nums):
    poncatmon_kindnum = len(set(nums)) # len() = 주어진 요소의 개수 반환, set() = 중복 제거
    get_num = len(nums) // 2
    answer = min(poncatmon_kindnum, get_num) # min을 사용하여 최댓값 구하기 (작은값 = 최댓값을 나타내기 때문에 min을 사용한 것 같다.)
    return answer

# Hash 3
# 전화번호부에 적힌 전화번호 중, 한 번호가 다른 번호의 접두어인 경우가 있는지 확인하려 합니다.
# 전화번호가 다음과 같을 경우, 구조대 전화번호는 영석이의 전화번호의 접두사입니다.

# 구조대 : 119
# 박준영 : 97 674 223
# 지영석 : 11 9552 4421

# 전화번호부에 적힌 전화번호를 담은 배열 phone_book 이 solution 함수의 매개변수로 주어질 때, 어떤 번호가 다른 번호의 접두어인 경우가 있으면 false를 그렇지 않으면 true를 return 하도록 solution 함수를 작성해주세요.

# 제한 사항
# phone_book의 길이는 1 이상 1,000,000 이하입니다.
# 각 전화번호의 길이는 1 이상 20 이하입니다.
# 같은 전화번호가 중복해서 들어있지 않습니다.

# 입출력 예제
# phone_book	return
# ["119", "97674223", "1195524421"]	false
# ["123","456","789"]	true
# ["12","123","1235","567","88"]	false

def solution(phone_book):
    phone_book.sort() # 정렬을 하는 이유: sort()는 리스트를 사전순으로 정렬하기 때문에 접두어가 있는 경우 바로 뒤에 나올 가능성이 높기에 사용함.
    for i in range(len(phone_book)-1): # phone_book의 번호리스트를 순회함. len()-1 = [i+1]이 유효하도록 하기 위해 len() 이 아닌 len()-1까지 반복문을 순회한다. 
        if phone_book[i+1].startswith(phone_book[i]): # 정렬로 인해 현재 번호가 다음번호의 접두어인지 비교하여 확인이 용이하고 결과에 따라 적절한 return 값 반환
            return False
    return True

# Hash 4
# 코니는 매일 다른 옷을 조합하여 입는것을 좋아합니다.

# 예를 들어 코니가 가진 옷이 아래와 같고, 오늘 코니가 동그란 안경, 긴 코트, 파란색 티셔츠를 입었다면 다음날은 청바지를 추가로 입거나 동그란 안경 대신 검정 선글라스를 착용하거나 해야합니다.

# 종류	이름
# 얼굴	동그란 안경, 검정 선글라스
# 상의	파란색 티셔츠
# 하의	청바지
# 겉옷	긴 코트
# 코니는 각 종류별로 최대 1가지 의상만 착용할 수 있습니다. 예를 들어 위 예시의 경우 동그란 안경과 검정 선글라스를 동시에 착용할 수는 없습니다.
# 착용한 의상의 일부가 겹치더라도, 다른 의상이 겹치지 않거나, 혹은 의상을 추가로 더 착용한 경우에는 서로 다른 방법으로 옷을 착용한 것으로 계산합니다.
# 코니는 하루에 최소 한 개의 의상은 입습니다.
# 코니가 가진 의상들이 담긴 2차원 배열 clothes가 주어질 때 서로 다른 옷의 조합의 수를 return 하도록 solution 함수를 작성해주세요.

# 제한사항
# clothes의 각 행은 [의상의 이름, 의상의 종류]로 이루어져 있습니다.
# 코니가 가진 의상의 수는 1개 이상 30개 이하입니다.
# 같은 이름을 가진 의상은 존재하지 않습니다.
# clothes의 모든 원소는 문자열로 이루어져 있습니다.
# 모든 문자열의 길이는 1 이상 20 이하인 자연수이고 알파벳 소문자 또는 '_' 로만 이루어져 있습니다.
# 입출력 예
# clothes	return
# [["yellow_hat", "headgear"], ["blue_sunglasses", "eyewear"], ["green_turban", "headgear"]]	5
# [["crow_mask", "face"], ["blue_sunglasses", "face"], ["smoky_makeup", "face"]]	3

def solution(clothes):
    answer = 1 # 모든 경우의 수를 나타내기 위해 초기값을 1로 설정함
    clodict = {} # dictionary = key와 value를 선언하기 용이함
    
    for i in clothes: # clothes 리스트에 대한 각 의상의 종류 파악
        clodict[i[-1]] = 0 # i[-1] = 각 의상의 정보의 마지막 원소이자 의상의 종류를 의미함
        # dictionary의 key는 유일해야 하기 때문에 각 의상의 종류는 중복되지 않게 설정되고 각 의상의 종류에 대한 개수를 나타내는데 현 시점에선 추가되지 않아 0으로 reset 해줌.
    for j in clothes: # clothes 리스트에 대한 각 의상의 종류에 대한 개수 파악
        clodict[j[-1]] += len(j[:-1]) # ([:-1]) = list slicing = 리스트에서 특정 범위의 원소를 추출함.
        # 위의 코드의 현재 기본값은 전체 리스트 이며 -1은 마지막 원소이기 때문에 len(j[:-1]) = 처음부터 마지막 원소를 제외한 나머지 값 반환 = 의상의 종류를 제외한 나머지 다른 정보
        # 고로 해당하는 의상의 종류에 대한 개수를 더해준다.
    for k in clodict.values(): # 각 의상의 종류에 대한 입을 수 있는 경우의 수 계산
        answer = (k+1)*answer # (k+1)를 한 이유: 단일 종류의 옷만 입어 다른 종류의 옷을 입지 않은 경우도 포함하기 위해 사용
        # answer = answer를 사용한 이유: 현재 결과값인 왼쪽 answer를 구하기 위해 기존 결과값인 오른쪽 answer에 경우의 수를 계산하여 현재 결과값으로 보내기 위해서 사용
    return answer - 1 # 아무 옷도 입지 않은 경우의 수 하나는 제외해준다.
# Hash 5
# 쉽사리 도전하기 쉽지 않아 일단 보류